{"componentChunkName":"component---src-templates-content-template-js","path":"/part2/rendering_a_collection_modules","result":{"data":{"markdownRemark":{"html":"<div class=\"content\">\n<p>Before starting a new part, let's recap some of the topics that proved difficult last year.</p>\n<h3>console.log</h3>\n<p><strong><em>What's the difference between an experienced JavaScript programmer and a rookie?\nThe experienced one uses console.log 10-100 times more.</em></strong></p>\n<p>Paradoxically, this seems to be true even though a rookie programmer would need <code class=\"language-text\">console.log</code> (or any debugging method) more than an experienced one.</p>\n<p>When something does not work, don't just guess what's wrong.\nInstead, log or use some other way of debugging.</p>\n<blockquote>\n<p><strong>NB</strong> As <a href=\"/part1/a_more_complex_state_debugging_react_apps#a-quick-word-about-logging\">fully explained in part 1</a>,\nwhen you use the command <code class=\"language-text\">console.log</code> for debugging,\ndon't concatenate things 'the Java way' with a plus.\n<strong>Use a comma instead!</strong></p>\n</blockquote>\n<h3>Protip: Webstorm Live Templates</h3>\n<p>With WebStorm it's easy to create and 'live templates', i.e., shortcuts/snippets\nfor quickly generating commonly re-used portions of code, much like how <code class=\"language-text\">sout</code> works in Netbeans and <code class=\"language-text\">psvm</code> works in IntelliJ.</p>\n<p><strong>Try typing <code class=\"language-text\">rsc</code> and then hitting <em>Tab</em> and see the magic that appears!</strong></p>\n<p>Instructions for working with live templates can be found <a href=\"https://blog.jetbrains.com/webstorm/2018/01/using-and-creating-code-snippets/#work_with_live_templates\">here</a>.</p>\n<p>There are already lots of live templates that are available for you to review in <strong><em>Settings->Editor->Live Templates</em></strong>.</p>\n<p>Another live template for the <code class=\"language-text\">console.log()</code> command, which is, <strong>log</strong>.</p>\n<p>To use it, type <code class=\"language-text\">log</code> and hit Tab to autocomplete.</p>\n<p>Though it doesn't stop there, as you can make custom live templates.</p>\n<p>For example, I'm going to taken\n<a href=\"https://betterprogramming.pub/intellij-live-template-for-console-log-that-will-improve-your-daily-development-life-ef1320a8fe81\">this tutorial</a>\nand boil it down to its essence.</p>\n<p>Let's setup a custom <code class=\"language-text\">clog</code> live template.</p>\n<ol>\n<li>Go to <strong><em>Settings->Editor->Live Templates</em></strong></li>\n<li>With Javascript Selected, click on the <code class=\"language-text\">+</code> icon.</li>\n<li>Type <code class=\"language-text\">clog</code> for the Abbreviation and <code class=\"language-text\">More detailed console.log</code> for the Description</li>\n<li>\n<p>Paste this in the template text:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'File: $FILE$, Function: $FUNCTION$, Line $LINE$ - Is $PARAM_TEXT$ ($EXPECTED$)?: '</span><span class=\"token punctuation\">,</span> $<span class=\"token constant\">PARAM</span>$<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>$<span class=\"token constant\">END</span>$</code></pre></div>\n</li>\n<li>Select <strong><em>Reformat according to style</em></strong></li>\n<li>Click the Define linke below the template text and select <strong><em>Javascript &#x26; Typescript</em></strong>.</li>\n<li>Finally click edit variables and make it looks like this, make sure you have the order of the variables as well.</li>\n</ol>\n<picture><img src=\"/static/821c102aaf0da0270f5b3f2699e3ada9/5a190/live_template_variables.png\" alt=\"image showing the variables and values\" srcset=\"/static/821c102aaf0da0270f5b3f2699e3ada9/772e8/live_template_variables.png 200w,\n/static/821c102aaf0da0270f5b3f2699e3ada9/e17e5/live_template_variables.png 400w,\n/static/821c102aaf0da0270f5b3f2699e3ada9/5a190/live_template_variables.png 800w,\n/static/821c102aaf0da0270f5b3f2699e3ada9/dc333/live_template_variables.png 938w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>Click <strong><em>OK</em></strong> twice and then try it out by typing <code class=\"language-text\">clog</code> and then <strong><em>Tab</em></strong>.\nYou'll notice that you have this template that will provide you with a function name and line number\nas well as other neat values to make it easier to debug!</p>\n<h3>JavaScript Arrays</h3>\n<p>From here on out, we will be using the functional programming methods of the JavaScript\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array\">array</a>,\nsuch as <code class=\"language-text\">find</code>, <code class=\"language-text\">filter</code>, and <code class=\"language-text\">map</code> - all of the time.\nThey operate on the same general principles as their equivalents in other languages and as streams in Java.</p>\n<p>If operating arrays with functional operators makes you feel uneasy, it is worth watching at least the first three parts of the YouTube video series\n<a href=\"https://www.youtube.com/playlist?list=PL0zVEGEvSaeEd9hlmCXrk5yUyqUag-n84\">Functional Programming in JavaScript</a>:</p>\n<ul>\n<li><a href=\"https://www.youtube.com/watch?v=BMUiFMZr7vk&#x26;list=PL0zVEGEvSaeEd9hlmCXrk5yUyqUag-n84\">Higher-order functions</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=bCqtb-Z5YGQ&#x26;list=PL0zVEGEvSaeEd9hlmCXrk5yUyqUag-n84&#x26;index=2\">Map</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=Wl98eZpkp-c&#x26;t=31s\">Reduce basics</a></li>\n</ul>\n<h3>Event Handlers Revisited</h3>\n<p>Event handling is complex.</p>\n<p>It's worth reviewing the\n<a href=\"/part1/a_more_complex_state_debugging_react_apps#event-handling-revisited\">previous section on event handlers</a>.</p>\n<p>Passing event handlers to the child components of the <code class=\"language-text\">App</code> component can also be complex, so you may want to revisit <a href=\"/part1/a_more_complex_state_debugging_react_apps#passing-event-handlers-to-child-components\">the material that was provided about the topic here</a>.</p>\n<h3>Rendering Collections</h3>\n<p>We will now do the 'frontend', or the browser-side application logic, in React for an application that's similar to the example application from <a href=\"/part0\">part 0</a></p>\n<p>Let's start with the following (the file <em>App.js</em>):</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> tasks <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> props\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">></span>Tasks<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>ul<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>li<span class=\"token operator\">></span><span class=\"token punctuation\">{</span>tasks<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>content<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>li<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>li<span class=\"token operator\">></span><span class=\"token punctuation\">{</span>tasks<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>content<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>li<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>li<span class=\"token operator\">></span><span class=\"token punctuation\">{</span>tasks<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>content<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>li<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>ul<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> App</code></pre></div>\n<p>The file <em>index.js</em> looks like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span>\n<span class=\"token keyword\">import</span> ReactDOM <span class=\"token keyword\">from</span> <span class=\"token string\">'react-dom/client'</span>\n\n<span class=\"token keyword\">import</span> App <span class=\"token keyword\">from</span> <span class=\"token string\">'./App'</span>\n\n<span class=\"token keyword\">const</span> tasks <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span>\n    id<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n    content<span class=\"token operator\">:</span> <span class=\"token string\">'Wash the dishes'</span><span class=\"token punctuation\">,</span>\n    date<span class=\"token operator\">:</span> <span class=\"token string\">'2023-01-10T17:30:31.098Z'</span><span class=\"token punctuation\">,</span>\n    important<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span>\n    id<span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n    content<span class=\"token operator\">:</span> <span class=\"token string\">'Take out the trash'</span><span class=\"token punctuation\">,</span>\n    date<span class=\"token operator\">:</span> <span class=\"token string\">'2023-01-10T18:39:34.091Z'</span><span class=\"token punctuation\">,</span>\n    important<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span>\n    id<span class=\"token operator\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span>\n    content<span class=\"token operator\">:</span> <span class=\"token string\">'Buy salty snacks'</span><span class=\"token punctuation\">,</span>\n    date<span class=\"token operator\">:</span> <span class=\"token string\">'2023-01-10T19:20:14.298Z'</span><span class=\"token punctuation\">,</span>\n    important<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">]</span>\n\nReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">createRoot</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>\n  <span class=\"token operator\">&lt;</span>App tasks<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>tasks<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Every task contains its textual content and a timestamp,\nas well as a <code class=\"language-text\">boolean</code> value for marking whether the task has been categorized as important or not, and also a unique <code class=\"language-text\">id</code>.</p>\n<p>The example above works because there are exactly three tasks in the array.</p>\n<p>A single task is rendered by accessing the objects in the array by referring to a hard-coded index number:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>li<span class=\"token operator\">></span><span class=\"token punctuation\">{</span>tasks<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>content<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>li<span class=\"token operator\">></span></code></pre></div>\n<p>This is, of course, not practical.\nWe can improve on this by generating React elements from the array objects using the\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map\">map</a> function.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">tasks<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">task</span> <span class=\"token operator\">=></span> <span class=\"token operator\">&lt;</span>li<span class=\"token operator\">></span><span class=\"token punctuation\">{</span>task<span class=\"token punctuation\">.</span>content<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>li<span class=\"token operator\">></span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>The result is an array of <code class=\"language-text\">li</code> elements.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">[</span>\n  <span class=\"token operator\">&lt;</span>li<span class=\"token operator\">></span>Wash the dishes<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>li<span class=\"token operator\">></span><span class=\"token punctuation\">,</span>\n  <span class=\"token operator\">&lt;</span>li<span class=\"token operator\">></span>Take out the trash<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>li<span class=\"token operator\">></span><span class=\"token punctuation\">,</span>\n  <span class=\"token operator\">&lt;</span>li<span class=\"token operator\">></span>Buy salty snacks<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>li<span class=\"token operator\">></span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span></code></pre></div>\n<p>Which can then be placed inside <code class=\"language-text\">ul</code> tags:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> tasks <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> props\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">></span>Tasks<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span>\n<span class=\"gatsby-highlight-code-line\">      <span class=\"token operator\">&lt;</span>ul<span class=\"token operator\">></span></span><span class=\"gatsby-highlight-code-line\">        <span class=\"token punctuation\">{</span>tasks<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">task</span> <span class=\"token operator\">=></span> <span class=\"token operator\">&lt;</span>li<span class=\"token operator\">></span><span class=\"token punctuation\">{</span>task<span class=\"token punctuation\">.</span>content<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>li<span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>ul<span class=\"token operator\">></span></span>    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Because the code generating the <code class=\"language-text\">li</code> tags is JavaScript, it must be wrapped in curly braces in a JSX template just like all other JavaScript code.</p>\n<p>We will also make the code more readable by separating the arrow function's declaration across multiple lines:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> tasks <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> props\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">></span>Tasks<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>ul<span class=\"token operator\">></span>\n        <span class=\"token punctuation\">{</span>tasks<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">task</span> <span class=\"token operator\">=></span> \n<span class=\"gatsby-highlight-code-line\">          <span class=\"token operator\">&lt;</span>li<span class=\"token operator\">></span></span><span class=\"gatsby-highlight-code-line\">            <span class=\"token punctuation\">{</span>task<span class=\"token punctuation\">.</span>content<span class=\"token punctuation\">}</span></span><span class=\"gatsby-highlight-code-line\">          <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>li<span class=\"token operator\">></span></span>        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>ul<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>Key-attribute</h3>\n<p>Even though the application seems to be working, there is a nasty warning in the console:</p>\n<picture><img src=\"/static/569790fe1214a39c9515a6e0ac971d5e/5a190/1a.png\" alt=\"unique key prop console error\" srcset=\"/static/569790fe1214a39c9515a6e0ac971d5e/772e8/1a.png 200w,\n/static/569790fe1214a39c9515a6e0ac971d5e/e17e5/1a.png 400w,\n/static/569790fe1214a39c9515a6e0ac971d5e/5a190/1a.png 800w,\n/static/569790fe1214a39c9515a6e0ac971d5e/90712/1a.png 882w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>As the linked <a href=\"https://reactjs.org/docs/lists-and-keys.html#keys\">React page</a> in the error message suggests;\nthe list items, i.e. the elements generated by the <code class=\"language-text\">map</code> method, must each have a unique key value: an attribute called <strong>key</strong>.</p>\n<p>Let's add the keys:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> tasks <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> props\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">></span>Tasks<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>ul<span class=\"token operator\">></span>\n        <span class=\"token punctuation\">{</span>tasks<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">task</span> <span class=\"token operator\">=></span> \n<span class=\"gatsby-highlight-code-line\">          <span class=\"token operator\">&lt;</span>li key<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>task<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">}</span><span class=\"token operator\">></span></span>            <span class=\"token punctuation\">{</span>task<span class=\"token punctuation\">.</span>content<span class=\"token punctuation\">}</span>\n          <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>li<span class=\"token operator\">></span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>ul<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>And the error message disappears.</p>\n<p>React uses the key attributes of objects in an array to determine how to update the view generated by a component when the component is re-rendered.\nMore about this is in the <a href=\"https://reactjs.org/docs/reconciliation.html#recursing-on-children\">React documentation</a>.</p>\n<h3>Map</h3>\n<p>Understanding how the array method\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map\"><code class=\"language-text\">map</code></a>\nworks is crucial for the rest of the course.</p>\n<p>The application contains an array called <code class=\"language-text\">tasks</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> tasks <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span>\n    id<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n    content<span class=\"token operator\">:</span> <span class=\"token string\">'Wash the dishes'</span><span class=\"token punctuation\">,</span>\n    date<span class=\"token operator\">:</span> <span class=\"token string\">'2023-01-10T17:30:31.098Z'</span><span class=\"token punctuation\">,</span>\n    important<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span>\n    id<span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n    content<span class=\"token operator\">:</span> <span class=\"token string\">'Take out the trash'</span><span class=\"token punctuation\">,</span>\n    date<span class=\"token operator\">:</span> <span class=\"token string\">'2023-01-10T18:39:34.091Z'</span><span class=\"token punctuation\">,</span>\n    important<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span>\n    id<span class=\"token operator\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span>\n    content<span class=\"token operator\">:</span> <span class=\"token string\">'Buy salty snacks'</span><span class=\"token punctuation\">,</span>\n    date<span class=\"token operator\">:</span> <span class=\"token string\">'2023-01-10T19:20:14.298Z'</span><span class=\"token punctuation\">,</span>\n    important<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">]</span></code></pre></div>\n<p>Let's pause for a moment and examine how <code class=\"language-text\">map</code> works.</p>\n<p>If the following code is added to, let's say, the end of the file:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> tasks<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">task</span> <span class=\"token operator\">=></span> task<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span></code></pre></div>\n<p><code class=\"language-text\">[1, 2, 3]</code>  will be printed to the console.\n<code class=\"language-text\">map</code> always creates a new array, the elements of which have been created from the elements of the original array by <strong><em>mapping</em></strong>:\nusing the function given as a parameter to the <code class=\"language-text\">map</code> method.</p>\n<p>The function is</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token parameter\">task</span> <span class=\"token operator\">=></span> task<span class=\"token punctuation\">.</span>id</code></pre></div>\n<p>Which is an arrow function written in compact form.\nThe full form would be:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">(</span><span class=\"token parameter\">task</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> task<span class=\"token punctuation\">.</span>id\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The function gets a task object as a parameter and <strong><em>returns</em></strong> the value of its <code class=\"language-text\">id</code> field.</p>\n<p>Changing the command to:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> tasks<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">task</span> <span class=\"token operator\">=></span> task<span class=\"token punctuation\">.</span>content<span class=\"token punctuation\">)</span></code></pre></div>\n<p>results in an array containing the contents of the tasks.</p>\n<p>This is already pretty close to the React code we used:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">tasks<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">task</span> <span class=\"token operator\">=></span>\n  <span class=\"token operator\">&lt;</span>li key<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>task<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n    <span class=\"token punctuation\">{</span>task<span class=\"token punctuation\">.</span>content<span class=\"token punctuation\">}</span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>li<span class=\"token operator\">></span>\n<span class=\"token punctuation\">)</span></code></pre></div>\n<p>which generates a <code class=\"language-text\">li</code> tag containing the contents of the task from each task object.</p>\n<p>Because the function parameter passed to the <code class=\"language-text\">map</code> method -</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token parameter\">task</span> <span class=\"token operator\">=></span> <span class=\"token operator\">&lt;</span>li key<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>task<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">}</span><span class=\"token operator\">></span><span class=\"token punctuation\">{</span>task<span class=\"token punctuation\">.</span>content<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>li<span class=\"token operator\">></span></code></pre></div>\n<p> - is used to create view elements, the value of the variable must be rendered inside curly braces.\nTry to see what happens if the braces are removed.</p>\n<p>The use of curly braces will cause some pain in the beginning, but you will get used to them soon enough.\nThe visual feedback from React is immediate.</p>\n<h3>Anti-pattern: Array Indexes as Keys</h3>\n<p>We could have made the error message on our console disappear by using the array indexes as keys.\nThe indexes can be retrieved by passing a second parameter to the callback function of the <code class=\"language-text\">map</code> method:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">tasks<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">task<span class=\"token punctuation\">,</span> i</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token operator\">...</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>When called like this, <code class=\"language-text\">i</code> is assigned the value of the index of the position in the array where the task resides.</p>\n<p>As such, one way to define the row generation without getting errors is:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>ul<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">{</span>tasks<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">task<span class=\"token punctuation\">,</span> i</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> \n    <span class=\"token operator\">&lt;</span>li key<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>i<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n      <span class=\"token punctuation\">{</span>task<span class=\"token punctuation\">.</span>content<span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>li<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>ul<span class=\"token operator\">></span></code></pre></div>\n<p>This is; however, <strong>not recommended</strong> and can create undesired problems even if it seems to be working just fine.</p>\n<p>Read more about this in <a href=\"https://robinpokorny.medium.com/index-as-a-key-is-an-anti-pattern-e0349aece318\">this article</a>.</p>\n<h3>Refactoring Modules</h3>\n<p>Let's tidy the code up a bit.\nWe are only interested in the field <code class=\"language-text\">tasks</code> of the props, so let's retrieve that directly using\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment\">destructuring</a>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> tasks <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span></span>  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">></span>Tasks<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>ul<span class=\"token operator\">></span>\n        <span class=\"token punctuation\">{</span>tasks<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">task</span> <span class=\"token operator\">=></span> \n          <span class=\"token operator\">&lt;</span>li key<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>task<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n            <span class=\"token punctuation\">{</span>task<span class=\"token punctuation\">.</span>content<span class=\"token punctuation\">}</span>\n          <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>li<span class=\"token operator\">></span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>ul<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>If you have forgotten what destructuring means and how it works, please review the <a href=\"/part1/component_state_event_handlers#destructuring\">section on destructuring</a>.</p>\n<p>We'll separate displaying a single task into its own component <code class=\"language-text\">Task</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Task</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> task <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token operator\">&lt;</span>li<span class=\"token operator\">></span><span class=\"token punctuation\">{</span>task<span class=\"token punctuation\">.</span>content<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>li<span class=\"token operator\">></span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> tasks <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">></span>Tasks<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>ul<span class=\"token operator\">></span>\n<span class=\"gatsby-highlight-code-line\">        <span class=\"token punctuation\">{</span>tasks<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">task</span> <span class=\"token operator\">=></span> </span><span class=\"gatsby-highlight-code-line\">          <span class=\"token operator\">&lt;</span>Task key<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>task<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">}</span> task<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>task<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span></span><span class=\"gatsby-highlight-code-line\">        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span>      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>ul<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Notice that the <code class=\"language-text\">key</code> attribute must now be defined for the <code class=\"language-text\">Task</code> components, and not in the <code class=\"language-text\">li</code> tags like before.</p>\n<p>A whole React application can be written in a single file.\nAlthough that is, of course, not very practical.\nCommon practice is to declare each component in its own file as an <strong>ES6-module</strong>.</p>\n<p>We have been using modules the whole time.\nThe first few lines of the file <em>index.js</em>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span>\n<span class=\"token keyword\">import</span> ReactDOM <span class=\"token keyword\">from</span> <span class=\"token string\">'react-dom/client'</span>\n\n<span class=\"token keyword\">import</span> App <span class=\"token keyword\">from</span> <span class=\"token string\">'./App'</span></code></pre></div>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import\">import</a> three modules, enabling them to be used in that file.\nThe module <strong><em>react</em></strong> is placed into the variable <code class=\"language-text\">React</code>, the module <strong><em>react-dom</em></strong> into the variable <code class=\"language-text\">ReactDOM</code>,\nand the module that defines the main component of the app is placed into the variable <code class=\"language-text\">App</code></p>\n<p>Let's move our <code class=\"language-text\">Task</code> component into its own module.</p>\n<p>In smaller applications, components are usually placed in a directory called <em>components</em>, which is in turn placed within the <em>src</em> directory.\nThe convention is to name the file after the component.</p>\n<p>Now, we'll create a directory called <strong><em>components</em></strong> for our application and place a file named <strong><em>Task.js</em></strong> inside.\nThe contents of the Task.js file are as follows:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Task</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> task <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>li<span class=\"token operator\">></span><span class=\"token punctuation\">{</span>task<span class=\"token punctuation\">.</span>content<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>li<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> Task</code></pre></div>\n<p>The last line of the module\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export\">exports</a>\nthe declared module, the variable <code class=\"language-text\">Task</code>.</p>\n<p>Now the file that is using the component - <em>App.js</em> - can <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import\">import</a> the module:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">import</span> Task <span class=\"token keyword\">from</span> <span class=\"token string\">'./components/Task'</span></span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> tasks <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The component exported by the module is now available for use in the variable <code class=\"language-text\">Task</code>, just as it was earlier.</p>\n<p>Notice that when importing our own components, their location must be given <em>in relation to the importing file</em>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token string\">'./components/Task'</span></code></pre></div>\n<p>The period - <code class=\"language-text\">.</code> - in the beginning refers to the current directory,\nso the module's location is a file called <em>Task.js</em> in the <em>components</em> sub-directory of the current directory.\nThe filename extension <em>.js</em> can be omitted.</p>\n<p>Modules have plenty of other uses other than enabling component declarations to be separated into their own files.\nWe will get back to them later in this course.</p>\n<p>The current code of the application can be found on <a href=\"https://github.com/comp227/part2-tasks/tree/part2-1\">GitHub</a>.</p>\n<p>Notice that the <em>main</em> branch of the repository is largely empty.\nThe current code is in the branch <a href=\"https://github.com/comp227/part2-tasks/tree/part2-1\">part2-1</a>:</p>\n<picture><img src=\"/static/6178acb4964dfd632cd1ac5f84147f2a/5a190/2e.png\" alt=\"GitHub branch screenshot\" srcset=\"/static/6178acb4964dfd632cd1ac5f84147f2a/772e8/2e.png 200w,\n/static/6178acb4964dfd632cd1ac5f84147f2a/e17e5/2e.png 400w,\n/static/6178acb4964dfd632cd1ac5f84147f2a/5a190/2e.png 800w,\n/static/6178acb4964dfd632cd1ac5f84147f2a/abe2a/2e.png 1067w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>If you clone the project, run the command <code class=\"language-text\">npm install</code> before starting the application with <code class=\"language-text\">npm start</code>.</p>\n<h3>When the Application Breaks</h3>\n<p>Early in your programming career (and even after 25 years of coding like yours truly),\nwhat often happens is that the application just completely breaks down.\nThis is even moreso the case with dynamically typed languages, such as JavaScript, where the compiler does not check the data type.\nFor instance, function variables or return values.</p>\n<p>A \"React explosion\" can, for example, look like this:</p>\n<picture><img src=\"/static/b6cf350d89db29b051d015c7b70bca41/5a190/3b.png\" alt=\"react sample error\" srcset=\"/static/b6cf350d89db29b051d015c7b70bca41/772e8/3b.png 200w,\n/static/b6cf350d89db29b051d015c7b70bca41/e17e5/3b.png 400w,\n/static/b6cf350d89db29b051d015c7b70bca41/5a190/3b.png 800w,\n/static/b6cf350d89db29b051d015c7b70bca41/2e367/3b.png 1066w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>In these situations, your best way out is the <code class=\"language-text\">console.log</code> method.</p>\n<p>The piece of code causing the explosion is this:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Company</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> company <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n  <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>Header company<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>company<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> company <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>Company company<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>company<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>We'll hone in on the reason for the breakdown by adding <code class=\"language-text\">console.log</code> commands to the code.\nBecause the first thing to be rendered is the <code class=\"language-text\">App</code> component, it's worth putting a <code class=\"language-text\">console.log</code> in there.\nUse your <code class=\"language-text\">clog</code> live template that we created above to get some easy information in, since <code class=\"language-text\">clog</code> wants variables,\ntype <code class=\"language-text\">company</code> and then <strong><em>Enter</em></strong> to type what you expect it to have.\nThen, press <strong><em>Enter</em></strong> again.\nFor me, I did something like this.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> company <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n  <span class=\"token punctuation\">}</span>\n\n<span class=\"gatsby-highlight-code-line\">  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'File: App.js, Function: App, Line 24 - Is company (JS Object)?: '</span><span class=\"token punctuation\">,</span> company<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token comment\">// ..</span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>To see the printing in the console, we must scroll up over the long red wall of errors.</p>\n<picture><img src=\"/static/580880550f7f8ff236c3a6cfdce2aa01/5a190/4b.png\" alt=\"initial printing of the console\" srcset=\"/static/580880550f7f8ff236c3a6cfdce2aa01/772e8/4b.png 200w,\n/static/580880550f7f8ff236c3a6cfdce2aa01/e17e5/4b.png 400w,\n/static/580880550f7f8ff236c3a6cfdce2aa01/5a190/4b.png 800w,\n/static/580880550f7f8ff236c3a6cfdce2aa01/121b3/4b.png 1070w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>When one thing is found to be working, it's time to log deeper.\nIf the component has been declared as a single statement or a function without a return, it makes printing to the console harder.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Company</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> company <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n  <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>Header company<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>company<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n<span class=\"token punctuation\">)</span></code></pre></div>\n<p>The component should be changed to its longer form for us to add the printing:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Company</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> company <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span> \n<span class=\"gatsby-highlight-code-line\">  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>company<span class=\"token punctuation\">)</span></span>  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>Header company<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>company<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Quite often the root of the problem is that the props are expected to be of a different type,\nor called with a different name than they actually are, and destructuring fails as a result.\nThe problem often begins to solve itself when destructuring is removed and we see what the <code class=\"language-text\">props</code> contain.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Company</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span></span>  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> company <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> props\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>Header company<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>company<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>If the problem has still not been resolved, sadly there isn't much to do apart from continuing to bug-hunt by sprinkling more <code class=\"language-text\">console.log</code> statements around your code.</p>\n<p>The original author added this chapter to the material after the model answer for the next question exploded completely\n(due to props being of the wrong type), and it had to be debuggged using <code class=\"language-text\">console.log</code>.</p>\n<p><strong><em>As you continue through, please remember the\n<a href=\"/part1/a_more_complex_state_debugging_react_apps#web-developers-pledge\">pledge</a>\nyou took to help you improve as a web developer</em></strong>.</p>\n</div>\n<div class=\"tasks\">\n<h3>Exercises 2.1-2.5</h3>\n<p>The exercises are submitted through GitHub and marking them as done on Canvas.</p>\n<p>Please make sure that you commit often, as that will be the way you show your work and progress through the course.</p>\n<p><strong>WARNING</strong> make sure you are in the correct location before calling <code class=\"language-text\">create-react-app</code></p>\n<h4>2.1: handheld arcade info step6</h4>\n<p>Let's finish the code for rendering companies' handheld arcade games and systems from exercises 1.1 - 1.5.\nIf you need help getting your solution to a good state, please let me know.\nI would recommend that you use <code class=\"language-text\">create-react-app</code> from the base directory and then just copy over the <em>src</em> folder.</p>\n<p><strong>Notice that if you copy the entire project from one place to another, you would have to delete the <em>node_modules</em> directory\nand install the dependencies again with the command <code class=\"language-text\">npm install</code> before you can start the application.</strong>\nLater on, we may use this method, but realize that <em>node_modules</em> is often huge and highly dependent on your system,\nso I think it's easier to let npm and create-react-app do those portions.</p>\n<p>You only need to copy the <strong>code</strong>!</p>\n<p>Generally, it's not recommended that you copy a project's whole contents and/or add the <em>node_modules</em> directory to the version control system.</p>\n<p>Let's change the <code class=\"language-text\">App</code> component like so:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> company <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    id<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n    name<span class=\"token operator\">:</span> <span class=\"token string\">'Nintendo'</span><span class=\"token punctuation\">,</span>\n    handhelds<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token punctuation\">{</span>\n        name<span class=\"token operator\">:</span> <span class=\"token string\">'Game Boy'</span><span class=\"token punctuation\">,</span>\n        games<span class=\"token operator\">:</span> <span class=\"token number\">1046</span><span class=\"token punctuation\">,</span>\n        id<span class=\"token operator\">:</span> <span class=\"token number\">1</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">{</span>\n        name<span class=\"token operator\">:</span> <span class=\"token string\">'Game Boy Advance'</span><span class=\"token punctuation\">,</span>\n        games<span class=\"token operator\">:</span> <span class=\"token number\">1538</span><span class=\"token punctuation\">,</span>\n        id<span class=\"token operator\">:</span> <span class=\"token number\">2</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">{</span>\n        name<span class=\"token operator\">:</span> <span class=\"token string\">'DS'</span><span class=\"token punctuation\">,</span>\n        games<span class=\"token operator\">:</span> <span class=\"token number\">1791</span><span class=\"token punctuation\">,</span>\n        id<span class=\"token operator\">:</span> <span class=\"token number\">3</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>Company company<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>company<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> App</code></pre></div>\n<p>Define a component responsible for formatting a single company called <code class=\"language-text\">Company</code>.</p>\n<p>The component structure of the application can be, for example, the following:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">App\n  Company\n    Header\n    Content\n      Handheld\n      Handheld\n      <span class=\"token punctuation\">..</span>.</code></pre></div>\n<p>Hence, the <code class=\"language-text\">Company</code> component contains the components defined in the previous part, which are responsible for rendering the company name and its handhelds.</p>\n<p>The rendered page can, for example, look as follows:</p>\n<picture><img src=\"/static/1fe0b6e89bbafca829737108630ac400/811d1/8e.png\" alt=\"half stack application screenshot\" srcset=\"/static/1fe0b6e89bbafca829737108630ac400/772e8/8e.png 200w,\n/static/1fe0b6e89bbafca829737108630ac400/811d1/8e.png 379w\" sizes=\"(max-width: 379px) 100vw, 379px\"></picture>\n<p>You don't need the sum of the games yet.</p>\n<p>The application must work <em>regardless of the number of handhelds a company has</em>,\nso make sure the application works if you add or remove handheld systems that a company has.</p>\n<p>Ensure that the console shows no errors!</p>\n<h4>2.2: handheld arcade info step7</h4>\n<p>Show also the sum of the games published for all handhelds of a company.</p>\n<picture><img src=\"/static/136e07b43c4a5ea36054246f972d722b/a07a7/9e.png\" alt=\"sum of exercises added feature\" srcset=\"/static/136e07b43c4a5ea36054246f972d722b/772e8/9e.png 200w,\n/static/136e07b43c4a5ea36054246f972d722b/e17e5/9e.png 400w,\n/static/136e07b43c4a5ea36054246f972d722b/a07a7/9e.png 534w\" sizes=\"(max-width: 534px) 100vw, 534px\"></picture>\n<h4>2.3*: handheld arcade info step8</h4>\n<p>If you haven't done so already, calculate the sum of games with the array method\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce\">reduce</a>.</p>\n<p><strong>Pro tip:</strong> when your code looks as follows:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> total <span class=\"token operator\">=</span> \n  handhelds<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">s<span class=\"token punctuation\">,</span> p</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> someMagicHere<span class=\"token punctuation\">)</span></code></pre></div>\n<p>and does not work, it's worth it to use <code class=\"language-text\">console.log</code>, which requires the arrow function to be written in its longer form:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> total <span class=\"token operator\">=</span> handhelds<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">s<span class=\"token punctuation\">,</span> p</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'what is going on inside handhelds reduce? '</span><span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> someMagicHere \n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p><strong>Not working?</strong> Use your search engine to look up how <code class=\"language-text\">reduce</code> is used in an <strong>Object Array</strong>.</p>\n<p><strong>Pro tip 2:</strong> If you right click and show context actions (or use the keyboard shortcut, for me it <strong><em>Ctrl-1</em></strong>),\nyou should see the ability for the IDE to make a variety of changes.\nFor example, JetBrains will automatically change the short-form arrow functions into their longer form and vice versa,\nshowing you a preview of what that would look like.</p>\n<picture><img src=\"/static/f858c512ae1ca9a939b94e9404f8093e/5a190/5b.png\" alt=\"WebStorm sample suggestion for arrow function\" srcset=\"/static/f858c512ae1ca9a939b94e9404f8093e/772e8/5b.png 200w,\n/static/f858c512ae1ca9a939b94e9404f8093e/e17e5/5b.png 400w,\n/static/f858c512ae1ca9a939b94e9404f8093e/5a190/5b.png 800w,\n/static/f858c512ae1ca9a939b94e9404f8093e/ae953/5b.png 1132w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<h4>2.4: handheld arcade info step9</h4>\n<p>Let's extend our application to allow for an <strong><em>arbitrary number</em></strong> of companies:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> companies <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span>\n      name<span class=\"token operator\">:</span> <span class=\"token string\">'Nintendo'</span><span class=\"token punctuation\">,</span>\n      id<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n      handhelds<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token punctuation\">{</span>\n          name<span class=\"token operator\">:</span> <span class=\"token string\">'Game Boy'</span><span class=\"token punctuation\">,</span>\n          games<span class=\"token operator\">:</span> <span class=\"token number\">1046</span><span class=\"token punctuation\">,</span>\n          id<span class=\"token operator\">:</span> <span class=\"token number\">1</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">{</span>\n          name<span class=\"token operator\">:</span> <span class=\"token string\">'Game Boy Advance'</span><span class=\"token punctuation\">,</span>\n          games<span class=\"token operator\">:</span> <span class=\"token number\">1538</span><span class=\"token punctuation\">,</span>\n          id<span class=\"token operator\">:</span> <span class=\"token number\">2</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">{</span>\n          name<span class=\"token operator\">:</span> <span class=\"token string\">'DS'</span><span class=\"token punctuation\">,</span>\n          games<span class=\"token operator\">:</span> <span class=\"token number\">1791</span><span class=\"token punctuation\">,</span>\n          id<span class=\"token operator\">:</span> <span class=\"token number\">3</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">{</span>\n          name<span class=\"token operator\">:</span> <span class=\"token string\">'3DS'</span><span class=\"token punctuation\">,</span>\n          games<span class=\"token operator\">:</span> <span class=\"token number\">1402</span><span class=\"token punctuation\">,</span>\n          id<span class=\"token operator\">:</span> <span class=\"token number\">4</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> \n    <span class=\"token punctuation\">{</span>\n      name<span class=\"token operator\">:</span> <span class=\"token string\">'Sony'</span><span class=\"token punctuation\">,</span>\n      id<span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n      handhelds<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token punctuation\">{</span>\n          name<span class=\"token operator\">:</span> <span class=\"token string\">'PSP'</span><span class=\"token punctuation\">,</span>\n          games<span class=\"token operator\">:</span> <span class=\"token number\">1925</span><span class=\"token punctuation\">,</span>\n          id<span class=\"token operator\">:</span> <span class=\"token number\">1</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">{</span>\n          name<span class=\"token operator\">:</span> <span class=\"token string\">'PS Vita'</span><span class=\"token punctuation\">,</span>\n          games<span class=\"token operator\">:</span> <span class=\"token number\">1500</span><span class=\"token punctuation\">,</span>\n          id<span class=\"token operator\">:</span> <span class=\"token number\">2</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">]</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token comment\">// ...</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The application can, for example, look like this:</p>\n<picture><img src=\"/static/8b0ed94729c048bd0b7cbcdf667a1ac6/5a190/10e.png\" alt=\"arbitrary number of courses feature add-on\" srcset=\"/static/8b0ed94729c048bd0b7cbcdf667a1ac6/772e8/10e.png 200w,\n/static/8b0ed94729c048bd0b7cbcdf667a1ac6/e17e5/10e.png 400w,\n/static/8b0ed94729c048bd0b7cbcdf667a1ac6/5a190/10e.png 800w,\n/static/8b0ed94729c048bd0b7cbcdf667a1ac6/33e10/10e.png 844w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<h4>2.5: separate module</h4>\n<p>Declare the <code class=\"language-text\">Company</code> component as a separate module, which is imported by the <code class=\"language-text\">App</code> component.\nYou can include all subcomponents of the company in the same module.</p>\n</div>","frontmatter":{"mainImage":{"publicURL":"/static/8869c2e065a6ae187c633a378e6fa6be/part-2.svg"},"part":2,"letter":"a","lang":"en"}}},"pageContext":{"part":2,"letter":"a","lang":"en"}}}