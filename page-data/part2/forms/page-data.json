{"componentChunkName":"component---src-templates-content-template-js","path":"/part2/forms","result":{"data":{"markdownRemark":{"html":"<div class=\"content\">\n<p>Let's continue expanding our application by allowing users to add new tasks.\nI would encourage you to follow along with using the code and typing things in as we go.\nIs it more frustrating? Absolutely.\nBut merely reading (or just watching) is not enough, you have to practice and type things in and work with the examples given.\nHowever, if you missed a step, you can find the code for our current application <a href=\"https://github.com/comp227/part2-tasks/tree/part2-1\">here</a>.</p>\n<p>To get our page to update when new tasks are added it's best to store the tasks in the <code class=\"language-text\">App</code> component's state.\nLet's import the <a href=\"https://reactjs.org/docs/hooks-state.html\">useState</a> function\nand use it to define a piece of state that gets initialized with the initial tasks array passed in the props.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useState <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span></span><span class=\"token keyword\">import</span> Task <span class=\"token keyword\">from</span> <span class=\"token string\">'./components/Task'</span>\n\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>tasks<span class=\"token punctuation\">,</span> setTasks<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">.</span>tasks<span class=\"token punctuation\">)</span></span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">></span>Tasks<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>ul<span class=\"token operator\">></span>\n        <span class=\"token punctuation\">{</span>tasks<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">task</span> <span class=\"token operator\">=></span> \n          <span class=\"token operator\">&lt;</span>Task key<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>task<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">}</span> task<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>task<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>ul<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> App<span class=\"token punctuation\">;</span></code></pre></div>\n<p>The component uses the <code class=\"language-text\">useState</code> function to initialize the piece of state stored in <code class=\"language-text\">tasks</code> with the array of tasks passed in the props:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span> \n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>tasks<span class=\"token punctuation\">,</span> setTasks<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">.</span>tasks<span class=\"token punctuation\">)</span> \n\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>We can also use React Developer Tools to see that this really happens:</p>\n<picture><img src=\"/static/cda04d01a17646dca1d7eb39e24cf1cd/5a190/30.png\" alt=\"browser showing react dev tools with both props and hooks\" srcset=\"/static/cda04d01a17646dca1d7eb39e24cf1cd/772e8/30.png 200w,\n/static/cda04d01a17646dca1d7eb39e24cf1cd/e17e5/30.png 400w,\n/static/cda04d01a17646dca1d7eb39e24cf1cd/5a190/30.png 800w,\n/static/cda04d01a17646dca1d7eb39e24cf1cd/c1b63/30.png 1200w,\n/static/cda04d01a17646dca1d7eb39e24cf1cd/6f278/30.png 1488w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>If we wanted to start with an empty list of tasks, we would set the initial value as an empty array,\nand since the props would not be used, we could omit the <code class=\"language-text\">props</code> parameter from the function definition:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span> \n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>tasks<span class=\"token punctuation\">,</span> setTasks<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> \n\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span>  </code></pre></div>\n<p>Let's stick with the initial value passed in the props for the time being.</p>\n<p>Next, let's add an HTML <a href=\"https://developer.mozilla.org/en-US/docs/Learn/HTML/Forms\">form</a> to the component that will be used for adding new tasks.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>tasks<span class=\"token punctuation\">,</span> setTasks<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">.</span>tasks<span class=\"token punctuation\">)</span>\n\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">addTask</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    event<span class=\"token punctuation\">.</span><span class=\"token function\">preventDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'button clicked'</span><span class=\"token punctuation\">,</span> event<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span></span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">></span>Tasks<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>ul<span class=\"token operator\">></span>\n        <span class=\"token punctuation\">{</span>tasks<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">task</span> <span class=\"token operator\">=></span> \n          <span class=\"token operator\">&lt;</span>Task key<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>task<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">}</span> task<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>task<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>ul<span class=\"token operator\">></span>\n<span class=\"gatsby-highlight-code-line\">      <span class=\"token operator\">&lt;</span>form onSubmit<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>addTask<span class=\"token punctuation\">}</span><span class=\"token operator\">></span></span><span class=\"gatsby-highlight-code-line\">        <span class=\"token operator\">&lt;</span>input <span class=\"token operator\">/</span><span class=\"token operator\">></span></span><span class=\"gatsby-highlight-code-line\">        <span class=\"token operator\">&lt;</span>button type<span class=\"token operator\">=</span><span class=\"token string\">\"submit\"</span><span class=\"token operator\">></span>save<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>form<span class=\"token operator\">></span>   </span>    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>We have added the <code class=\"language-text\">addTask</code> function as an event handler to the form element that will be called when the form is submitted, by clicking the submit button.</p>\n<p>We use the method discussed in <a href=\"/part1/component_state_event_handlers#event-handling\">part 1</a> for defining our event handler:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">addTask</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  event<span class=\"token punctuation\">.</span><span class=\"token function\">preventDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'button clicked'</span><span class=\"token punctuation\">,</span> event<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The <code class=\"language-text\">event</code> parameter is the <a href=\"https://reactjs.org/docs/handling-events.html\">event</a> that triggers the call to the event handler function:</p>\n<p>The event handler immediately calls the <code class=\"language-text\">event.preventDefault()</code> method, which prevents the default action of submitting a form.\nThe default action would, <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement/submit_event\">among other things</a>,\ncause the page to reload.</p>\n<p>The target of the event stored in <code class=\"language-text\">event.target</code> is logged to the console:</p>\n<picture><img src=\"/static/9e7eaf7bb14e042cf28aa0b0ed3b2f1a/a016c/6e.png\" alt=\"button clicked with form object console\" srcset=\"/static/9e7eaf7bb14e042cf28aa0b0ed3b2f1a/772e8/6e.png 200w,\n/static/9e7eaf7bb14e042cf28aa0b0ed3b2f1a/e17e5/6e.png 400w,\n/static/9e7eaf7bb14e042cf28aa0b0ed3b2f1a/a016c/6e.png 762w\" sizes=\"(max-width: 762px) 100vw, 762px\"></picture>\n<p>The target in this case is the form that we have defined in our component.</p>\n<p>How do we access the data contained in the form's <code class=\"language-text\">input</code> element?</p>\n<h3>Controlled component</h3>\n<p>There are many ways to accomplish this; the first method we will take a look at is through the use of so-called\n<a href=\"https://reactjs.org/docs/forms.html#controlled-components\">controlled components</a>.</p>\n<p>Let's add a new piece of state called <code class=\"language-text\">newTask</code> for storing the user-submitted input <strong>and</strong> let's set it as the <code class=\"language-text\">input</code> element's <code class=\"language-text\">value</code> attribute:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>tasks<span class=\"token punctuation\">,</span> setTasks<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">.</span>tasks<span class=\"token punctuation\">)</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>newTask<span class=\"token punctuation\">,</span> setNewTask<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token string\">'a new task...'</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">)</span> </span>\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">addTask</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    event<span class=\"token punctuation\">.</span><span class=\"token function\">preventDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'button clicked'</span><span class=\"token punctuation\">,</span> event<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">></span>Tasks<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>ul<span class=\"token operator\">></span>\n        <span class=\"token punctuation\">{</span>tasks<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">task</span> <span class=\"token operator\">=></span> \n          <span class=\"token operator\">&lt;</span>Task key<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>task<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">}</span> task<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>task<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>ul<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>form onSubmit<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>addTask<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n<span class=\"gatsby-highlight-code-line\">        <span class=\"token operator\">&lt;</span>input value<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>newTask<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span></span>        <span class=\"token operator\">&lt;</span>button type<span class=\"token operator\">=</span><span class=\"token string\">\"submit\"</span><span class=\"token operator\">></span>save<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>form<span class=\"token operator\">></span>   \n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The placeholder text stored as the initial value of the <code class=\"language-text\">newTask</code> state appears in the <code class=\"language-text\">input</code> element, but the input text can't be edited.\nThe console displays a warning that gives us a clue as to what might be wrong:</p>\n<picture><img src=\"/static/560158bcf5fb8b96c7aa2cef2f494c6f/5a190/7e.png\" alt=\"provided value to prop without onchange console error\" srcset=\"/static/560158bcf5fb8b96c7aa2cef2f494c6f/772e8/7e.png 200w,\n/static/560158bcf5fb8b96c7aa2cef2f494c6f/e17e5/7e.png 400w,\n/static/560158bcf5fb8b96c7aa2cef2f494c6f/5a190/7e.png 800w,\n/static/560158bcf5fb8b96c7aa2cef2f494c6f/121b3/7e.png 1070w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>Since we assigned a piece of the <code class=\"language-text\">App</code> component's state as the <code class=\"language-text\">value</code> attribute of the input element,\nthe <code class=\"language-text\">App</code> component now <a href=\"https://reactjs.org/docs/forms.html#controlled-components\">controls</a> the behavior of the input element.</p>\n<p>To enable editing of the input element, we have to register an <strong>event handler</strong> that synchronizes the changes made to the input with the component's state:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>tasks<span class=\"token punctuation\">,</span> setTasks<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">.</span>tasks<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>newTask<span class=\"token punctuation\">,</span> setNewTask<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span>\n    <span class=\"token string\">'a new task...'</span>\n  <span class=\"token punctuation\">)</span> \n\n  <span class=\"token comment\">// ...</span>\n\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">handleTaskChange</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token function\">setNewTask</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span></span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">></span>Tasks<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>ul<span class=\"token operator\">></span>\n        <span class=\"token punctuation\">{</span>tasks<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">task</span> <span class=\"token operator\">=></span> \n          <span class=\"token operator\">&lt;</span>Task key<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>task<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">}</span> task<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>task<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>ul<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>form onSubmit<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>addTask<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>input\n          value<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>newTask<span class=\"token punctuation\">}</span>\n<span class=\"gatsby-highlight-code-line\">          onChange<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>handleTaskChange<span class=\"token punctuation\">}</span></span>        <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>button type<span class=\"token operator\">=</span><span class=\"token string\">\"submit\"</span><span class=\"token operator\">></span>save<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>form<span class=\"token operator\">></span>   \n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>We have now registered an event handler to the <code class=\"language-text\">onChange</code> attribute of the form's <code class=\"language-text\">input</code> element:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>input\n  value<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>newTask<span class=\"token punctuation\">}</span>\n  onChange<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>handleTaskChange<span class=\"token punctuation\">}</span>\n<span class=\"token operator\">/</span><span class=\"token operator\">></span></code></pre></div>\n<p>The event handler is called every time <em>a change occurs in the input element</em>.\nThe event handler function receives the event object as its <code class=\"language-text\">event</code> parameter:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">handleTaskChange</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span>\n  <span class=\"token function\">setNewTask</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The <code class=\"language-text\">target</code> property of the event object now corresponds to the controlled <code class=\"language-text\">input</code> element, and <code class=\"language-text\">event.target.value</code> refers to the input value of that element.</p>\n<p>Notice that we did not need to call the <code class=\"language-text\">event.preventDefault()</code> method like we did in the <code class=\"language-text\">onSubmit</code> event handler.\nThis is because no default action occurs on an input change, unlike a form submission.</p>\n<p>You can follow along in the console to see how the event handler is called:</p>\n<picture><img src=\"/static/75d5db1fdd74c23dd9010a53e6837438/d0e73/8e.png\" alt=\"multiple console calls with typing text\" srcset=\"/static/75d5db1fdd74c23dd9010a53e6837438/772e8/8e.png 200w,\n/static/75d5db1fdd74c23dd9010a53e6837438/e17e5/8e.png 400w,\n/static/75d5db1fdd74c23dd9010a53e6837438/d0e73/8e.png 671w\" sizes=\"(max-width: 671px) 100vw, 671px\"></picture>\n<p>You did remember to install <a href=\"https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi\">React devtools</a>, right? Good.\nYou can directly view how the state changes from the React Devtools tab:</p>\n<picture><img src=\"/static/d827fd36d8576f5f9e1e9251804354dd/5a190/9ea.png\" alt=\"state changes in react devtools shows typing too\" srcset=\"/static/d827fd36d8576f5f9e1e9251804354dd/772e8/9ea.png 200w,\n/static/d827fd36d8576f5f9e1e9251804354dd/e17e5/9ea.png 400w,\n/static/d827fd36d8576f5f9e1e9251804354dd/5a190/9ea.png 800w,\n/static/d827fd36d8576f5f9e1e9251804354dd/d56e1/9ea.png 1130w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>Now the <code class=\"language-text\">App</code> component's <code class=\"language-text\">newTask</code> state reflects the current value of the input,\nwhich means that we can complete the <code class=\"language-text\">addTask</code> function for creating new tasks:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">addTask</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  event<span class=\"token punctuation\">.</span><span class=\"token function\">preventDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> taskObject <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    content<span class=\"token operator\">:</span> newTask<span class=\"token punctuation\">,</span>\n    date<span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toISOString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    important<span class=\"token operator\">:</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">,</span>\n    id<span class=\"token operator\">:</span> tasks<span class=\"token punctuation\">.</span>length <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">setTasks</span><span class=\"token punctuation\">(</span>tasks<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span>taskObject<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token function\">setNewTask</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>First, we create a new object for the task called <code class=\"language-text\">taskObject</code> that will receive its content from the component's <code class=\"language-text\">newTask</code> state.\nThe unique identifier <code class=\"language-text\">id</code> is generated based on the total number of tasks.\nThis method works for our application since tasks are never deleted.\nWith the help of the <code class=\"language-text\">Math.random()</code> function, our task has a 50% chance of being marked as important.</p>\n<p>The new task is added to the list of tasks using the\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/concat\">concat</a> array method,\nintroduced in <a href=\"/part1/java_script#arrays\">part 1</a>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">setTasks</span><span class=\"token punctuation\">(</span>tasks<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span>taskObject<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>The method does not mutate the original <code class=\"language-text\">tasks</code> array, but rather creates <em>a new copy of the array with the new item added to the end</em>.\nThis is important since we must <a href=\"https://reactjs.org/docs/state-and-lifecycle.html#using-state-correctly\">never mutate state directly</a> in React!</p>\n<p>The event handler also resets the value of the controlled input element by calling the <code class=\"language-text\">setNewTask</code> function of the <code class=\"language-text\">newTask</code> state:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">setNewTask</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>You can find the code for our current application in its entirety in the <em>part2-2</em> branch of\n<a href=\"https://github.com/comp227/part2-tasks/tree/part2-2\">this GitHub repository</a>.</p>\n<h3>Filtering Displayed Elements</h3>\n<p>Let's add some new functionality to our application that allows us to only view the important tasks.</p>\n<p>Let's add a piece of state to the <code class=\"language-text\">App</code> component that keeps track of which tasks should be displayed:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>tasks<span class=\"token punctuation\">,</span> setTasks<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">.</span>tasks<span class=\"token punctuation\">)</span> \n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>newTask<span class=\"token punctuation\">,</span> setNewTask<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>showAll<span class=\"token punctuation\">,</span> setShowAll<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span></span>  \n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Let's change the component so that it stores a list of all the tasks to be displayed in the <code class=\"language-text\">tasksToShow</code> variable.\nThe items on the list depend on the state of the component:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useState <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span>\n<span class=\"token keyword\">import</span> Task <span class=\"token keyword\">from</span> <span class=\"token string\">'./components/Task'</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>tasks<span class=\"token punctuation\">,</span> setTasks<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">.</span>tasks<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>newTask<span class=\"token punctuation\">,</span> setNewTask<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span> \n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>showAll<span class=\"token punctuation\">,</span> setShowAll<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">// ...</span>\n\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> tasksToShow <span class=\"token operator\">=</span> showAll</span><span class=\"gatsby-highlight-code-line\">    <span class=\"token operator\">?</span> tasks</span><span class=\"gatsby-highlight-code-line\">    <span class=\"token operator\">:</span> tasks<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">task</span> <span class=\"token operator\">=></span> task<span class=\"token punctuation\">.</span>important <span class=\"token operator\">===</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span></span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">></span>Tasks<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>ul<span class=\"token operator\">></span>\n<span class=\"gatsby-highlight-code-line\">        <span class=\"token punctuation\">{</span>tasksToShow<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">task</span> <span class=\"token operator\">=></span></span>          <span class=\"token operator\">&lt;</span>Task key<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>task<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">}</span> task<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>task<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>ul<span class=\"token operator\">></span>\n      <span class=\"token comment\">// ...</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The definition of the <code class=\"language-text\">tasksToShow</code> variable is rather compact:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> tasksToShow <span class=\"token operator\">=</span> showAll\n  <span class=\"token operator\">?</span> tasks\n  <span class=\"token operator\">:</span> tasks<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">task</span> <span class=\"token operator\">=></span> task<span class=\"token punctuation\">.</span>important <span class=\"token operator\">===</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>The definition uses the <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Conditional_Operator\">conditional AKA ternary AKA ?:</a> operator\nalso found in many other programming languages.</p>\n<p>The operator functions as follows.\nIf we have:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> condition <span class=\"token operator\">?</span> val1 <span class=\"token operator\">:</span> val2</code></pre></div>\n<p>the <code class=\"language-text\">result</code> variable will be set to the value of <code class=\"language-text\">val1</code> if <code class=\"language-text\">condition</code> is <code class=\"language-text\">true</code>.\nIf <code class=\"language-text\">condition</code> is <code class=\"language-text\">false</code>, the <code class=\"language-text\">result</code> variable will be set to the value of<code class=\"language-text\">val2</code>.</p>\n<p>If the value of <code class=\"language-text\">showAll</code> is false, the <code class=\"language-text\">tasksToShow</code> variable will be assigned to a list that only contains tasks that have the <code class=\"language-text\">important</code> property set to true.\nFiltering is done with the help of the array <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter\">filter</a> method:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">tasks<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">task</span> <span class=\"token operator\">=></span> task<span class=\"token punctuation\">.</span>important <span class=\"token operator\">===</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>The comparison operator is redundant, since the value of <code class=\"language-text\">task.important</code> is either <code class=\"language-text\">true</code> or <code class=\"language-text\">false</code>, which means that we can should instead write:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">tasks<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">task</span> <span class=\"token operator\">=></span> task<span class=\"token punctuation\">.</span>important<span class=\"token punctuation\">)</span></code></pre></div>\n<p>The reason we showed the comparison operator first was to emphasize an important detail: in JavaScript <code class=\"language-text\">val1 == val2</code> does not work as expected in all situations\nand it's safer to use <code class=\"language-text\">val1 === val2</code> exclusively in comparisons.\nYou can read more about the topic <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Equality_comparisons_and_sameness\">here</a>.</p>\n<p>You can test out the filtering functionality by changing the initial value of the <code class=\"language-text\">showAll</code> state.</p>\n<p>Next, let's add functionality that enables users to toggle the <code class=\"language-text\">showAll</code> state of the application from the user interface.</p>\n<p>The relevant changes are shown below:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useState <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span> \n<span class=\"token keyword\">import</span> Task <span class=\"token keyword\">from</span> <span class=\"token string\">'./components/Task'</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>tasks<span class=\"token punctuation\">,</span> setTasks<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">.</span>tasks<span class=\"token punctuation\">)</span> \n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>newTask<span class=\"token punctuation\">,</span> setNewTask<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>showAll<span class=\"token punctuation\">,</span> setShowAll<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">// ...</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">></span>Tasks<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span>\n<span class=\"gatsby-highlight-code-line\">      <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span></span><span class=\"gatsby-highlight-code-line\">        <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setShowAll</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>showAll<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span></span><span class=\"gatsby-highlight-code-line\">          show <span class=\"token punctuation\">{</span>showAll <span class=\"token operator\">?</span> <span class=\"token string\">'important'</span> <span class=\"token operator\">:</span> <span class=\"token string\">'all'</span> <span class=\"token punctuation\">}</span></span><span class=\"gatsby-highlight-code-line\">        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span></span>      <span class=\"token operator\">&lt;</span>ul<span class=\"token operator\">></span>\n        <span class=\"token punctuation\">{</span>tasksToShow<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">task</span> <span class=\"token operator\">=></span>\n          <span class=\"token operator\">&lt;</span>Task key<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>task<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">}</span> task<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>task<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>ul<span class=\"token operator\">></span>\n      <span class=\"token comment\">// ...</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The displayed tasks (all versus important) are controlled with a button.\nThe event handler for the button is so simple that it has been defined directly in the attribute of the button element.\nThe event handler switches the value of <code class=\"language-text\">showAll</code> from true to false and vice versa:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setShowAll</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>showAll<span class=\"token punctuation\">)</span></code></pre></div>\n<p>The text of the button depends on the value of the <code class=\"language-text\">showAll</code> state:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">show <span class=\"token punctuation\">{</span>showAll <span class=\"token operator\">?</span> <span class=\"token string\">'important'</span> <span class=\"token operator\">:</span> <span class=\"token string\">'all'</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>You can find the code for our current application in its entirety in the <em>part2-3</em> branch of\n<a href=\"https://github.com/comp227/part2-tasks/tree/part2-3\">this GitHub repository</a>.</p>\n</div>\n<div class=\"tasks\">\n<h3>Exercises 2.6-2.10</h3>\n<p>In the first exercise, we will start working on an application that will be further developed in the later exercises, so you'll need to create another application.\nIn related sets of exercises, it is sufficient to return the final version of your application.</p>\n<p>The exercises are submitted through GitHub and marking them as done on Canvas.</p>\n<p>Please make sure <strong>that you commit often</strong>, as that will be the way you show your work and progress through the course.</p>\n<p><strong>WARNING</strong> make sure you are in the correct location before calling <code class=\"language-text\">create-react-app</code></p>\n<h4>2.6: The Communities Step1</h4>\n<p>Let's create a simple community directory, which will be a list of communities that we may want to join.</p>\n<p>Let us start by implementing the addition of a single community to this directory.</p>\n<p>You can use the code below as a starting point for the <code class=\"language-text\">App</code> component of your application:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useState <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>groups<span class=\"token punctuation\">,</span> setGroups<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span> name<span class=\"token operator\">:</span> <span class=\"token string\">'COMP 227 Students'</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> \n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>newName<span class=\"token punctuation\">,</span> setNewName<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>h2<span class=\"token operator\">></span>Community Directory<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h2<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>form<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n          name<span class=\"token operator\">:</span> <span class=\"token operator\">&lt;</span>input <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n          <span class=\"token operator\">&lt;</span>button type<span class=\"token operator\">=</span><span class=\"token string\">\"submit\"</span><span class=\"token operator\">></span>add<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>form<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>h2<span class=\"token operator\">></span>URLs<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h2<span class=\"token operator\">></span>\n      <span class=\"token operator\">...</span>     \n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> App</code></pre></div>\n<p>The <code class=\"language-text\">newName</code> state is meant for controlling the form input element.</p>\n<p>Sometimes it can be useful to render state and other variables as text for debugging purposes.\nYou can temporarily add the following element to the rendered component:</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span>debug: {newName}<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>It's also important to put what we learned in the <a href=\"/part1/a_more_complex_state_debugging_react_apps\">debugging React applications</a> chapter of part one into good use.\nThe <a href=\"https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi\">React developer tools</a>\nextension is <strong><em>incredibly</em></strong> useful for tracking changes that occur in the application's state.</p>\n<p>After finishing this exercise your application should look something like this:</p>\n<picture><img src=\"/static/04ecea1dde5c15f5332e9bd31c60da4d/5e3a3/10e.png\" alt=\"screenshot of 2.6 finished\" srcset=\"/static/04ecea1dde5c15f5332e9bd31c60da4d/772e8/10e.png 200w,\n/static/04ecea1dde5c15f5332e9bd31c60da4d/e17e5/10e.png 400w,\n/static/04ecea1dde5c15f5332e9bd31c60da4d/5e3a3/10e.png 763w\" sizes=\"(max-width: 763px) 100vw, 763px\"></picture>\n<p>Notice the use of the React developer tools extension in the picture above!</p>\n<blockquote>\n<p><strong>NB:</strong></p>\n<ul>\n<li>you can use the group's name as a value of the <code class=\"language-text\">key</code> property</li>\n<li>remember to prevent the default action of submitting HTML forms!</li>\n</ul>\n</blockquote>\n<h4>2.7: The Communities Step2</h4>\n<p>Prevent the user from being able to add names that already exist in the list.\nJavaScript arrays have numerous suitable\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array\">methods</a>\nfor accomplishing this job.\nKeep in mind <a href=\"https://www.joshbritz.co/posts/why-its-so-hard-to-check-object-equality/\">how object equality works</a> in Javascript.</p>\n<p>Issue a warning with the <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Window/alert\">alert</a> command when such an action is attempted:</p>\n<picture><img src=\"/static/18dea58af0a8b74c77fd0aa2056d03bb/c54b3/11e.png\" alt=\"2.7 sample screenshot\" srcset=\"/static/18dea58af0a8b74c77fd0aa2056d03bb/772e8/11e.png 200w,\n/static/18dea58af0a8b74c77fd0aa2056d03bb/e17e5/11e.png 400w,\n/static/18dea58af0a8b74c77fd0aa2056d03bb/c54b3/11e.png 727w\" sizes=\"(max-width: 727px) 100vw, 727px\"></picture>\n<p><strong>Hint:</strong> when you are forming strings that contain values from variables, it is recommended to use a\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals\">template string</a>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>newName<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> has already been added to the community directory</span><span class=\"token template-punctuation string\">`</span></span></code></pre></div>\n<p>If the <code class=\"language-text\">newName</code> variable holds the value <code class=\"language-text\">Arto Hellas</code>, the template string expression returns the string</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Arto Hellas has already been added to the community directory</span><span class=\"token template-punctuation string\">`</span></span></code></pre></div>\n<p>The same could be done in a more Java-like fashion by using the plus operator:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">newName <span class=\"token operator\">+</span> <span class=\"token string\">' has already been added to the community directory'</span></code></pre></div>\n<p>Using template strings is the more idiomatic option and the sign of a true JavaScript professional.</p>\n<h4>2.8: The Communities Step3</h4>\n<p>Expand your application by allowing users to add URLs to the community directory.\nThe URL will be an invitation link to that communities' discord or slack group.\nYou will need to add a second <strong><em>input</em></strong> element to the form (along with its own event handler):</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>form<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>name<span class=\"token operator\">:</span> <span class=\"token operator\">&lt;</span>input <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span><span class=\"token constant\">URL</span><span class=\"token operator\">:</span> <span class=\"token operator\">&lt;</span>input <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span><span class=\"token operator\">&lt;</span>button type<span class=\"token operator\">=</span><span class=\"token string\">\"submit\"</span><span class=\"token operator\">></span>add<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>form<span class=\"token operator\">></span></code></pre></div>\n<p>At this point, the application could look something like this.\nThe image also displays the application's state with the help of <a href=\"https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi\">React developer tools</a>:</p>\n<picture><img src=\"/static/2c863cfde2ed8179de594f9a037dae1a/5a190/12e.png\" alt=\"2.8 sample screenshot\" srcset=\"/static/2c863cfde2ed8179de594f9a037dae1a/772e8/12e.png 200w,\n/static/2c863cfde2ed8179de594f9a037dae1a/e17e5/12e.png 400w,\n/static/2c863cfde2ed8179de594f9a037dae1a/5a190/12e.png 800w,\n/static/2c863cfde2ed8179de594f9a037dae1a/e35ec/12e.png 861w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<h4>2.9*: The Communities Step4</h4>\n<p>Implement a search field that can be used to filter the list of communities by name:</p>\n<picture><img src=\"/static/a0e0022e7e262d1534b3388113a804d9/5a190/13e.png\" alt=\"2.9 sample screenshot\" srcset=\"/static/a0e0022e7e262d1534b3388113a804d9/772e8/13e.png 200w,\n/static/a0e0022e7e262d1534b3388113a804d9/e17e5/13e.png 400w,\n/static/a0e0022e7e262d1534b3388113a804d9/5a190/13e.png 800w,\n/static/a0e0022e7e262d1534b3388113a804d9/9c177/13e.png 880w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>You can implement the search field as an <strong><em>input</em></strong> element that is placed outside the HTML form.\nThe filtering logic shown in the image is <strong>case insensitive</strong>, meaning that the search term <code class=\"language-text\">comp</code> also returns results that contain Comp with an uppercase C.</p>\n<blockquote>\n<p><strong>NB:</strong> When you are working on new functionality, it's often useful to \"hardcode\" some dummy data into your application, e.g.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>groups<span class=\"token punctuation\">,</span> setGroups<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span> name<span class=\"token operator\">:</span> <span class=\"token string\">'COMP 227 Students'</span><span class=\"token punctuation\">,</span> url<span class=\"token operator\">:</span> <span class=\"token string\">'https://discord.gg/VRUKRxCJ95'</span><span class=\"token punctuation\">,</span> id<span class=\"token operator\">:</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span> name<span class=\"token operator\">:</span> <span class=\"token string\">'PySlackers'</span><span class=\"token punctuation\">,</span> url<span class=\"token operator\">:</span> <span class=\"token string\">'https://pythondev.slack.com'</span><span class=\"token punctuation\">,</span> id<span class=\"token operator\">:</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span> name<span class=\"token operator\">:</span> <span class=\"token string\">'Code Support'</span><span class=\"token punctuation\">,</span> url<span class=\"token operator\">:</span> <span class=\"token string\">'https://discord.gg/XQ9C3sY'</span><span class=\"token punctuation\">,</span> id<span class=\"token operator\">:</span> <span class=\"token number\">3</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span> name<span class=\"token operator\">:</span> <span class=\"token string\">'Front End Developers'</span><span class=\"token punctuation\">,</span> url<span class=\"token operator\">:</span> <span class=\"token string\">'https://discord.gg/XHsumw2C39'</span><span class=\"token punctuation\">,</span> id<span class=\"token operator\">:</span> <span class=\"token number\">4</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>This saves you from having to manually input data into your application for testing out your new functionality.</p>\n</blockquote>\n<h4>2.10: The Communities Step5</h4>\n<p>If you have implemented your application in a single component, refactor it by extracting suitable parts into new components.\nMaintain the application's state and all event handlers in the <code class=\"language-text\">App</code> root component.</p>\n<p>It is sufficient to extract <strong><em>three</em></strong> components from the application.\nGood candidates for separate components are, for example, the search filter, the form for adding a group,\na component that renders all communities, and a component that renders a single group's details.</p>\n<p>The application's root component could look similar to this after the refactoring.\nThe refactored root component below only renders titles and lets the extracted components take care of the rest.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>h2<span class=\"token operator\">></span>Community Directory<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h2<span class=\"token operator\">></span>\n\n      <span class=\"token operator\">&lt;</span>Filter <span class=\"token operator\">...</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n\n      <span class=\"token operator\">&lt;</span>h3<span class=\"token operator\">></span>Add a <span class=\"token keyword\">new</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h3<span class=\"token operator\">></span>\n\n      <span class=\"token operator\">&lt;</span>GroupForm \n        <span class=\"token operator\">...</span>\n      <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n\n      <span class=\"token operator\">&lt;</span>h3<span class=\"token operator\">></span>URLs<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h3<span class=\"token operator\">></span>\n\n      <span class=\"token operator\">&lt;</span>Groups <span class=\"token operator\">...</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<blockquote>\n<p><strong>NB</strong>: You might run into problems in this exercise if you define your components \"in the wrong place\".\nNow would be a good time to rehearse\nthe chapter <a href=\"/part1/a_more_complex_state_debugging_react_apps#do-not-define-components-within-components\">do not define a component in another component</a>\nfrom the last part.</p>\n</blockquote>\n</div>","frontmatter":{"mainImage":{"publicURL":"/static/8869c2e065a6ae187c633a378e6fa6be/part-2.svg"},"part":2,"letter":"b","lang":"en"}}},"pageContext":{"part":2,"letter":"b","lang":"en"}}}