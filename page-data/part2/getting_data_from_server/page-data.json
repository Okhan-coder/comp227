{"componentChunkName":"component---src-templates-content-template-js","path":"/part2/getting_data_from_server","result":{"data":{"markdownRemark":{"html":"<div class=\"content\">\n<p>For a while now we have only been working on \"frontend\", i.e. client-side (browser) functionality.\nWe will begin working on \"backend\", i.e. server-side functionality in the <a href=\"/part3\">third part</a> of this course.\nNonetheless, we will now take a step in that direction by familiarizing ourselves with how the code executing in the browser communicates with the backend.</p>\n<p>Let's use a tool meant to be used during software development called <a href=\"https://github.com/typicode/json-server\">JSON Server</a> to act as our server.</p>\n<p>Create a file named <em>db.json</em> in the root directory of the previous tasks project with the following content:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"tasks\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"id\"</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"content\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Wash the dishes\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"date\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"2022-1-17T17:30:31.098Z\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"important\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"id\"</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"content\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Take out the trash\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"date\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"2022-1-17T18:39:34.091Z\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"important\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"id\"</span><span class=\"token operator\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"content\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Buy salty snacks\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"date\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"2022-1-17T19:20:14.298Z\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"important\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>You can <a href=\"https://github.com/typicode/json-server#getting-started\">install</a> a JSON server globally on your machine using the command <code class=\"language-text\">npm install -g json-server</code>.\nA global installation requires administrative privileges, which means that it is not possible on school computers.</p>\n<p>After installing run the following command to run the json-server.\nThe <em>json-server</em> starts running on port 3000 by default;\nbut since projects created using create-react-app reserve port 3000,\nwe must define an alternate port, such as port 3001, for the json-server.\nThe --watch option automatically looks for any saved changes to db.json</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">json<span class=\"token operator\">-</span>server <span class=\"token operator\">--</span>port <span class=\"token number\">3001</span> <span class=\"token operator\">--</span>watch db<span class=\"token punctuation\">.</span>json</code></pre></div>\n<p>However, a global installation is not necessary.\nFrom the root directory of your app, we can run the <em>json-server</em> using the command <code class=\"language-text\">npx</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">npx json<span class=\"token operator\">-</span>server <span class=\"token operator\">--</span>port <span class=\"token number\">3001</span> <span class=\"token operator\">--</span>watch db<span class=\"token punctuation\">.</span>json</code></pre></div>\n<p>Let's navigate to the address <a href=\"http://localhost:3001/tasks\">http://localhost:3001/tasks</a> in the browser.\nWe can see that <em>json-server</em> serves the tasks we previously wrote to the file in JSON format:</p>\n<picture><img src=\"/static/582977c690ac1f5cfedf2f5881321627/a65ce/14e.png\" alt=\"json data of tasks\" srcset=\"/static/582977c690ac1f5cfedf2f5881321627/772e8/14e.png 200w,\n/static/582977c690ac1f5cfedf2f5881321627/e17e5/14e.png 400w,\n/static/582977c690ac1f5cfedf2f5881321627/a65ce/14e.png 559w\" sizes=\"(max-width: 559px) 100vw, 559px\"></picture>\n<p>If your browser doesn't display the data as nicely as you see above, install an appropriate plugin,\nlike <a href=\"https://chrome.google.com/webstore/detail/jsonview/chklaanhfefbnpoihckbnefhakgolnmc\">JSONVue</a> to make your life easier.</p>\n<p>Going forward, the idea will be to save the tasks to the server, which in this case means saving them to the json-server.\nThe React code fetches the tasks from the server and renders them to the screen.\nWhenever a new task is added to the application, the React code also sends it to the server to make the new task persist in \"memory\".</p>\n<p>json-server stores all the data in the <em>db.json</em> file, which resides on the server.\nIn the real world, data would be stored in some kind of database.\nHowever, json-server is a handy tool that enables the use of server-side functionality in the development phase without the need to program any of it.</p>\n<p>We will get familiar with the principles of implementing server-side functionality in more detail in <a href=\"/part3\">part 3</a> of this course.</p>\n<h3>The browser as a runtime environment</h3>\n<p>Our first task is fetching the already existing tasks to our React application from the address <a href=\"http://localhost:3001/tasks\">http://localhost:3001/tasks</a>.</p>\n<p>In the part0 <a href=\"part0/fundamentals_of_web_apps#running-application-logic-in-the-browser\">example project</a>,\nwe already learned a way to fetch data from a server using JavaScript.\nThe code in the example was fetching the data using <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest\">XMLHttpRequest</a>,\notherwise known as an HTTP request made using an XHR object.\nThis is a technique introduced in 1999, which every browser has supported for a good while now.</p>\n<p>The use of XHR is no longer recommended, and browsers already widely support the\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch\">fetch</a> method,\nwhich is based on <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise\"><em>promises</em></a>,\ninstead of the event-driven model used by XHR.</p>\n<p>As a reminder from part0 (which one should <strong>remember to not use <code class=\"language-text\">xhr</code></strong> without a pressing reason),\ndata was fetched using XHR in the following way:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> xhttp <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">XMLHttpRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\nxhttp<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onreadystatechange</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>readyState <span class=\"token operator\">==</span> <span class=\"token number\">4</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>status <span class=\"token operator\">==</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> data <span class=\"token operator\">=</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>responseText<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// handle the response that is saved in variable data</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\nxhttp<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'GET'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'/data.json'</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\nxhttp<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Right at the beginning, we register an <em>event handler</em> to the <code class=\"language-text\">xhttp</code> object representing the HTTP request,\nwhich will be called by the JavaScript runtime whenever the state of the <code class=\"language-text\">xhttp</code> object changes.\nIf the change in state means that the response to the request has arrived, then the data is handled accordingly.</p>\n<p>It is worth noting that the code in the event handler is defined before the request is sent to the server.\nDespite this, the code within the event handler will be executed at a later point in time.\nTherefore, the code does not execute synchronously \"from top to bottom\", but does so <strong>asynchronously</strong>.\nJavaScript calls the event handler that was registered for the request at some point.</p>\n<p>A synchronous way of making requests that's common in Java programming, for instance,\nwould play out as follows (NB, this is not actually working Java code):</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">HTTPRequest</span> request <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HTTPRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">String</span> url <span class=\"token operator\">=</span> <span class=\"token string\">\"https://comp227-exampleapp.herokuapp.com/data.json\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Task</span><span class=\"token punctuation\">></span></span> tasks <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\ntasks<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>m <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">.</span>content<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>In Java, the code executes line by line and stops to wait for the HTTP request, which means waiting for the command <code class=\"language-text\">request.get(...)</code> to finish.\nThe data returned by the command, in this case the tasks, are then stored in a variable, and we begin manipulating the data in the desired manner.</p>\n<p>On the other hand, JavaScript engines, or runtime environments, follow the <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/EventLoop\">asynchronous model</a>.\nIn principle, this requires all\n<a href=\"https://en.wikipedia.org/wiki/Input/output\">IO operations</a>\n(with some exceptions) to be executed as non-blocking.\nThis means that code execution continues immediately after calling an IO function, <strong><em>without waiting for it to return</em></strong>.</p>\n<p>When an asynchronous operation is completed, or, more specifically, at some point after its completion,\nthe JavaScript engine calls the event handlers registered to the operation.</p>\n<p>Currently, JavaScript engines are <strong>single-threaded</strong>, which means that they cannot execute code in parallel.\nAs a result, it is a requirement in practice to use a non-blocking model for executing IO operations.\nOtherwise, the browser would \"freeze\" during, for instance, the fetching of data from a server.</p>\n<p>Another consequence of this single-threaded nature of JavaScript engines is that if some code execution takes up a lot of time, the browser will get stuck for the duration of the execution.\nIf we added the following code at the top of our application:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'loop..'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;</span> <span class=\"token number\">50000000000</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    i<span class=\"token operator\">++</span>\n  <span class=\"token punctuation\">}</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'end'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5000</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>everything would work normally for 5 seconds.\nHowever, when the function defined as the parameter for <code class=\"language-text\">setTimeout</code> is run,\nthe browser will be stuck for the duration of the execution of the long loop.\nEven the browser tab cannot be closed during the execution of the loop, at least not in Chrome.</p>\n<p>For the browser to remain <strong>responsive</strong>, i.e., to be able to continuously react to user operations with sufficient speed,\nthe code logic needs to be such that no single computation can take too long.</p>\n<p>There is a host of additional material on the subject to be found on the internet.\nFor example, Philip Roberts clearly explains event loops in his presentation,\n<a href=\"https://www.youtube.com/watch?v=8aGhZQkoFbQ\">What the heck is the event loop anyway?</a></p>\n<p>In today's browsers, it is possible to run parallelized code with the help of so-called\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Using_web_workers\">web workers</a>.\nThe event loop of an individual browser window is, however, still only handled by a\n<a href=\"https://medium.com/techtrument/multithreading-javascript-46156179cf9a\">single thread</a>.</p>\n<h3>npm</h3>\n<p>Let's get back to the topic of fetching data from the server.</p>\n<p>We could use the previously mentioned promise-based function\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch\">fetch</a>\nto pull the data from the server.\nFetch is a wonderful tool.\nIt is standardized and supported by all modern browsers (excluding IE).</p>\n<p>That being said, we will be using the <a href=\"https://github.com/axios/axios\">axios</a> library instead for communication between the browser and server.\nIt functions like fetch but is somewhat more pleasant to use.\nAnother good reason to use axios is our getting familiar with adding external libraries, so-called <em>npm packages</em>, to React projects.</p>\n<p>Nowadays, practically all JavaScript projects are defined using the node package manager, aka <a href=\"https://docs.npmjs.com/getting-started/what-is-npm\">npm</a>.\nThe projects created using create-react-app also follow the npm format.\nA clear indicator that a project uses npm is the <em>package.json</em> file located at the root of the project:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"tasks\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"version\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"0.1.0\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"private\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"dependencies\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"@testing-library/jest-dom\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^5.16.1\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"@testing-library/react\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^12.1.2\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"@testing-library/user-event\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^13.5.0\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"react\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^17.0.2\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"react-dom\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^17.0.2\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"react-scripts\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"5.0.0\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"web-vitals\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^2.1.3\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"start\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"react-scripts start\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"build\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"react-scripts build\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"test\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"react-scripts test\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"eject\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"react-scripts eject\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"eslintConfig\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"extends\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token string\">\"react-app\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"react-app/jest\"</span>\n    <span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"browserslist\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"production\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token string\">\">0.2%\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"not dead\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"not op_mini all\"</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"development\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token string\">\"last 1 chrome version\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"last 1 firefox version\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"last 1 safari version\"</span>\n    <span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>At this point, the <code class=\"language-text\">dependencies</code> part is of most interest to us as it defines what <strong>dependencies</strong>, or external libraries, the project has.</p>\n<p>We now want to use axios.\nTheoretically, we could define the library directly in the <em>package.json</em> file, but it is better to install it from the command line.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">npm install axios</code></pre></div>\n<p><strong>NB <em>npm</em> commands should always be run in the project root directory</strong>, which is where the <em>package.json</em> file can be found.</p>\n<p>Axios is now included among the other dependencies:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"tasks\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"version\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"0.1.0\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"private\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"dependencies\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"@testing-library/jest-dom\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^5.16.1\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"@testing-library/react\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^12.1.2\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"@testing-library/user-event\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^13.5.0\"</span><span class=\"token punctuation\">,</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token property\">\"axios\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^0.24.0\"</span><span class=\"token punctuation\">,</span></span>    <span class=\"token property\">\"react\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^17.0.2\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"react-dom\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^17.0.2\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"react-scripts\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"5.0.0\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"web-vitals\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^2.1.3\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>In addition to adding axios to the dependencies, the <code class=\"language-text\">npm install</code> command also <strong><em>downloaded</em></strong> the library code.\nAs with other dependencies, the code can be found in the <em>node_modules</em> directory located in the root.\nAs one might have noticed, <em>node_modules</em> contains a fair amount of interesting stuff.</p>\n<p>Let's make another addition.\nInstall <em>json-server</em> as a development dependency (only used during development) by executing the command:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">npm install json<span class=\"token operator\">-</span>server <span class=\"token operator\">--</span>save<span class=\"token operator\">-</span>dev</code></pre></div>\n<p>and making a small addition to the <em>scripts</em> part of the <em>package.json</em> file:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n\n  <span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"start\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"react-scripts start\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"build\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"react-scripts build\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"test\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"react-scripts test\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"eject\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"react-scripts eject\"</span><span class=\"token punctuation\">,</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token property\">\"server\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"json-server -p3001 --watch db.json\"</span></span>  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>We can now conveniently, without parameter definitions, start the json-server from the project root directory with the command:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">npm run server</code></pre></div>\n<blockquote>\n<p><strong>NB</strong> The previously started json-server must be terminated before starting a new one; otherwise, there will be trouble:</p>\n<picture><img src=\"/static/a4ffad64d07becb9563f62ad8d76b9c0/5ebd7/15b.png\" alt=\"cannot bind to port 3001 error\" srcset=\"/static/a4ffad64d07becb9563f62ad8d76b9c0/772e8/15b.png 200w,\n/static/a4ffad64d07becb9563f62ad8d76b9c0/e17e5/15b.png 400w,\n/static/a4ffad64d07becb9563f62ad8d76b9c0/5ebd7/15b.png 704w\" sizes=\"(max-width: 704px) 100vw, 704px\"></picture>\n<p>The red print in the error message informs us about the issue:</p>\n<p><em>Cannot bind to port 3001.\nPlease specify another port number either through --port argument or through the json-server.json configuration file</em></p>\n<p>As we can see, the application is not able to bind itself to the <a href=\"https://en.wikipedia.org/wiki/Port_(computer_networking)\">port</a>,\nbecause <strong>port 3001 is already occupied by the previously started json-server</strong>.</p>\n</blockquote>\n<h4>The nuances of npm</h4>\n<p>We used the command <code class=\"language-text\">npm install</code> twice, but with slight differences:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">npm install axios\nnpm install json<span class=\"token operator\">-</span>server <span class=\"token operator\">--</span>save<span class=\"token operator\">-</span>dev</code></pre></div>\n<p>There is a slight difference in the parameters.\n<em>axios</em> is installed as a <strong>runtime dependency</strong> of the application because the execution of the program requires the existence of the library.\nOn the other hand, <em>json-server</em> was installed as a <strong>development dependency</strong> (<code class=\"language-text\">--save-dev</code>),\nsince the program itself doesn't require it.\nDevelopment dependencies are used for assistance during software development.</p>\n<p>We will get more familiar with the <em>npm</em> tool and additional dependency nuances in the <a href=\"/part3\">third part of the course</a>.</p>\n<h3>Axios and promises</h3>\n<p>Now we are ready to use axios.\nGoing forward, json-server is assumed to be running on port 3001.</p>\n<p>NB: To run json-server and your react app simultaneously, you will need to use two terminal windows.\nOne to keep json-server running and the other to run react-app.\nNormally I have a third terminal window open as well to work with git if you are not using WebStorms built-in tools.</p>\n<p>The library can be brought into use the same way other libraries, e.g. React, are, i.e., by using an appropriate <code class=\"language-text\">import</code> statement.</p>\n<p>Add the following to the file <em>index.js</em>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> axios <span class=\"token keyword\">from</span> <span class=\"token string\">'axios'</span>\n\n<span class=\"token keyword\">const</span> promise <span class=\"token operator\">=</span> axios<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http://localhost:3001/tasks'</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>promise<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> promise2 <span class=\"token operator\">=</span> axios<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http://localhost:3001/foobar'</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>promise2<span class=\"token punctuation\">)</span></code></pre></div>\n<p>If you open <a href=\"http://localhost:3000\">http://localhost:3000</a> in the browser, this should be printed to the console</p>\n<picture><img src=\"/static/fb3c96fda82cbb638fa7c8ea10a05736/1f083/16b.png\" alt=\"promises printed to console\" srcset=\"/static/fb3c96fda82cbb638fa7c8ea10a05736/772e8/16b.png 200w,\n/static/fb3c96fda82cbb638fa7c8ea10a05736/e17e5/16b.png 400w,\n/static/fb3c96fda82cbb638fa7c8ea10a05736/1f083/16b.png 660w\" sizes=\"(max-width: 660px) 100vw, 660px\"></picture>\n<p>Notice when the content of the file <em>index.js</em> changes,\nReact does not always notice that automatically, <strong>so you might need to refresh the browser to see your changes!</strong>\nA simple workaround to make React notice the change automatically is to create a file named <em>.env</em> in the root directory of the project and add this line <code class=\"language-text\">FAST_REFRESH=false</code>.\nWhile you are at it, you can also add the following line <code class=\"language-text\">BROWSER=none</code> if you don't want a browser to be launched every time you run <code class=\"language-text\">npm start</code>.\nRestart the app for the applied changes to take effect.</p>\n<p>Axios' method <code class=\"language-text\">get</code> returns a <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Using_promises\">promise</a>.</p>\n<p>The documentation on Mozilla's site states the following about promises:</p>\n<blockquote>\n<p><em>A Promise is an object representing the eventual completion or failure of an asynchronous operation.</em></p>\n</blockquote>\n<p>In other words, a promise is an object that represents an asynchronous operation.\nA promise can have three distinct states:</p>\n<ol>\n<li>The promise is <strong>pending</strong>: It means that the final value (one of the following two) is not available yet.</li>\n<li>The promise is <strong>fulfilled</strong>: It means that the operation has been completed\nand the final value is available, which generally is a successful operation.\nThis state is sometimes also called <strong>resolved</strong>.</li>\n<li>The promise is <strong>rejected</strong>: It means that an error prevented the final value from being determined, which generally represents a failed operation.</li>\n</ol>\n<p>The first promise in our example is <strong><em>fulfilled</em></strong>, representing a successful <em>axios.get('<a href=\"http://localhost:3001/tasks&#x27;\">http://localhost:3001/tasks'</a>)</em> request.\nThe second one, however, is <strong><em>rejected</em></strong>, and the console tells us the reason.\nIt looks like we were trying to make an HTTP GET request to a non-existent address.</p>\n<p>If, and when, we want to access the result of the operation represented by the promise, we must register an event handler to the promise.\nThis is achieved using the method <code class=\"language-text\">then</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> promise <span class=\"token operator\">=</span> axios<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http://localhost:3001/tasks'</span><span class=\"token punctuation\">)</span>\n\npromise<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>The following is printed to the console:</p>\n<picture><img src=\"/static/5fbd8b2970ac7fca31bbaabc4d004d61/7131f/17e.png\" alt=\"json object data printed to console\" srcset=\"/static/5fbd8b2970ac7fca31bbaabc4d004d61/772e8/17e.png 200w,\n/static/5fbd8b2970ac7fca31bbaabc4d004d61/e17e5/17e.png 400w,\n/static/5fbd8b2970ac7fca31bbaabc4d004d61/7131f/17e.png 710w\" sizes=\"(max-width: 710px) 100vw, 710px\"></picture>\n<p>The JavaScript runtime environment calls the callback function registered by the <code class=\"language-text\">then</code> method providing it with a <code class=\"language-text\">response</code> object as a parameter.\nThe <code class=\"language-text\">response</code> object contains all the essential data related to the response of an HTTP GET request,\nwhich would include the returned <strong><em>data</em></strong>, <strong><em>status code</em></strong>, and <strong><em>headers</em></strong>.</p>\n<p>Storing the promise object in a variable is generally unnecessary,\nand it's instead common to chain the <code class=\"language-text\">then</code> method call to the <code class=\"language-text\">axios</code> method call, so that it follows it directly:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">axios<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http://localhost:3001/tasks'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> tasks <span class=\"token operator\">=</span> response<span class=\"token punctuation\">.</span>data\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>tasks<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>The callback function now takes the data contained within the response, stores it in a variable, and prints the tasks to the console.</p>\n<p>A more readable way to format <strong><em>chained</em></strong> method calls is to place each call on its own line:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">axios\n  <span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http://localhost:3001/tasks'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> tasks <span class=\"token operator\">=</span> response<span class=\"token punctuation\">.</span>data\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>tasks<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>The data returned by the server is plain text, basically just one long string.\nThe axios library is still able to parse the data into a JavaScript array,\nsince the server has specified that the data format is <code class=\"language-text\">application/json; charset=utf-8</code> (see the previous image) using the <code class=\"language-text\">content-type</code> header.</p>\n<p>We can finally begin using the data fetched from the server.</p>\n<p>Let's try and request the tasks from our local server and render them, initially as the App component.\nConsider that this approach has many issues, as we're rendering the entire <code class=\"language-text\">App</code> component only when we successfully retrieve a response:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span>\n<span class=\"token keyword\">import</span> ReactDOM <span class=\"token keyword\">from</span> <span class=\"token string\">'react-dom/client'</span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">import</span> axios <span class=\"token keyword\">from</span> <span class=\"token string\">'axios'</span></span>\n<span class=\"token keyword\">import</span> App <span class=\"token keyword\">from</span> <span class=\"token string\">'./App'</span>\n\naxios<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http://localhost:3001/tasks'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> tasks <span class=\"token operator\">=</span> response<span class=\"token punctuation\">.</span>data\n  ReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">createRoot</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>App tasks<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>tasks<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>This method could be acceptable in some circumstances, but it's somewhat problematic.\nLet's instead move the fetching of the data into the <code class=\"language-text\">App</code> component.</p>\n<p>What's not immediately obvious, however, is where the command <code class=\"language-text\">axios.get</code> should be placed within the component.</p>\n<h3>Effect-hooks</h3>\n<p>We have already used <a href=\"https://reactjs.org/docs/hooks-state.html\">state hooks</a>\nthat were introduced along with React version <a href=\"https://www.npmjs.com/package/react/v/16.8.0\">16.8.0</a>,\nwhich provide state to React components defined as functions - the so-called <strong>functional components</strong>.\nVersion 16.8.0 also introduces <a href=\"https://reactjs.org/docs/hooks-effect.html\">effect hooks</a> as a new feature.\nAs per the official docs:</p>\n<blockquote>\n<p><em>The Effect Hook lets you perform side effects on function components.</em>\n<em>Data fetching, setting up a subscription, and manually changing the DOM in React components are all examples of side effects.</em></p>\n</blockquote>\n<p>As such, effect hooks are precisely the right tool to use when fetching data from a server.</p>\n<p>Let's remove the fetching of data from <em>index.js</em>.\nSince we're gonna be retrieving the tasks from the server, there is no longer a need to pass data as props to the <code class=\"language-text\">App</code> component.\nSo <em>index.js</em> can be simplified to:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">ReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">createRoot</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>App <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>The <code class=\"language-text\">App</code> component changes as follows:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useState<span class=\"token punctuation\">,</span> useEffect <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">import</span> axios <span class=\"token keyword\">from</span> <span class=\"token string\">'axios'</span></span><span class=\"token keyword\">import</span> Task <span class=\"token keyword\">from</span> <span class=\"token string\">'./components/Task'</span>\n\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>tasks<span class=\"token punctuation\">,</span> setTasks<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></span>  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>newTask<span class=\"token punctuation\">,</span> setNewTask<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>showAll<span class=\"token punctuation\">,</span> setShowAll<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'use effect'</span><span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">    axios</span><span class=\"gatsby-highlight-code-line\">      <span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http://localhost:3001/tasks'</span><span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'promise fulfilled'</span><span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">        <span class=\"token function\">setTasks</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\"></span><span class=\"gatsby-highlight-code-line\">  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'rendered'</span><span class=\"token punctuation\">,</span> tasks<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">,</span> <span class=\"token string\">'tasks'</span><span class=\"token punctuation\">)</span></span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>We have also added a few helpful prints, which clarify the progression of the execution.</p>\n<p>This is printed to the console:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">rendered <span class=\"token number\">0</span> tasks\nuse effect\npromise fulfilled\nrendered <span class=\"token number\">3</span> tasks</code></pre></div>\n<p>First, the body of the function defining the component is executed and the component is rendered for the first time.\nAt this point <code class=\"language-text\">render 0 tasks</code> is printed, meaning data hasn't been fetched from the server yet.</p>\n<p>The following function, or effect in React parlance:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'use effect'</span><span class=\"token punctuation\">)</span>\n  axios\n    <span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http://localhost:3001/tasks'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'promise fulfilled'</span><span class=\"token punctuation\">)</span>\n      <span class=\"token function\">setTasks</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>is executed immediately after rendering.\nThe execution of the function results in <code class=\"language-text\">effect</code> being printed to the console,\nand the command <code class=\"language-text\">axios.get</code> initiates the fetching of data from the server as well as registers the following function as an <em>event handler</em> for the operation:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token parameter\">response</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'promise fulfilled'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token function\">setTasks</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>When data arrives from the server, the JavaScript runtime calls the function registered as the event handler,\nwhich prints <code class=\"language-text\">promise fulfilled</code> to the console and stores the tasks received from the server into the state using the function <code class=\"language-text\">setTasks(response.data)</code>.</p>\n<p>As always, a call to a state-updating function triggers the re-rendering of the component.\nAs a result, <code class=\"language-text\">render 3 tasks</code> is printed to the console, and the tasks fetched from the server are rendered to the screen.</p>\n<p>Finally, let's take a look at the definition of the effect hook as a whole:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'use effect'</span><span class=\"token punctuation\">)</span>\n  axios\n    <span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http://localhost:3001/tasks'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'promise fulfilled'</span><span class=\"token punctuation\">)</span>\n      <span class=\"token function\">setTasks</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Let's rewrite the code a bit differently.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">hook</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'effect'</span><span class=\"token punctuation\">)</span>\n  axios\n    <span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http://localhost:3001/tasks'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'promise fulfilled'</span><span class=\"token punctuation\">)</span>\n      <span class=\"token function\">setTasks</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span>hook<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Now we can see more clearly that the function <a href=\"https://reactjs.org/docs/hooks-reference.html#useeffect\">useEffect</a> takes <strong>two parameters</strong>.\nThe first is a function, the <strong><em>effect</em></strong> itself.\nAccording to the documentation:</p>\n<blockquote>\n<p><em>By default, effects run after every completed render, but you can choose to fire it only when certain values have changed.</em></p>\n</blockquote>\n<p>So by default, the effect is <strong><em>always</em></strong> run after the component has been rendered.\nIn our case, however, we only want to execute the effect along with the first render.</p>\n<p>The second parameter of <code class=\"language-text\">useEffect</code> is used to <a href=\"https://reactjs.org/docs/hooks-reference.html#conditionally-firing-an-effect\">specify how often the effect is run</a>.\nIf the second parameter is an empty array <code class=\"language-text\">[]</code>, then the effect is only run along with the first render of the component.</p>\n<p>There are many possible use cases for an effect hook other than fetching data from the server.\nHowever, this use is sufficient for us, for now.</p>\n<p>Think back to the sequence of events we just discussed.\nWhich parts of the code are run? In what order? How often?\nUnderstanding the order of events is critical!</p>\n<p>Notice that we could have also written the code for the effect function this way:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'effect'</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">eventHandler</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">response</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'promise fulfilled'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">setTasks</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">const</span> promise <span class=\"token operator\">=</span> axios<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http://localhost:3001/tasks'</span><span class=\"token punctuation\">)</span>\n  promise<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>eventHandler<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>A reference to an event handler function is assigned to the variable <code class=\"language-text\">eventHandler</code>.\nThe promise returned by the <code class=\"language-text\">get</code> method of Axios is stored in the variable <code class=\"language-text\">promise</code>.\nThe registration of the callback happens by giving the <code class=\"language-text\">eventHandler</code> variable,\nreferring to the event-handler function, as a parameter to the <code class=\"language-text\">then</code> method of the promise.\nIt isn't usually necessary to assign functions and promises to variables,\nand a more compact way of representing things, as seen further above, is sufficient.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'use effect'</span><span class=\"token punctuation\">)</span>\n  axios\n    <span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http://localhost:3001/tasks'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'promise fulfilled'</span><span class=\"token punctuation\">)</span>\n      <span class=\"token function\">setTasks</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>We still have a problem with our application.\nWhen adding new tasks, they are not stored on the server.</p>\n<p>The code for the application, as described so far, can be found in full on\n<a href=\"https://github.com/comp227/part2-tasks/tree/part2-4\">github</a>, on branch <em>part2-4</em>.</p>\n<h3>The development runtime environment</h3>\n<p>The configuration for the whole application has steadily grown more complex.\nLet's review what happens and where.\nThe following image describes the makeup of the application</p>\n<picture><img src=\"/static/0e3766361ce9d08f0c4fdd39152cf493/5a190/18e.png\" alt=\"diagram of composition of react app\" srcset=\"/static/0e3766361ce9d08f0c4fdd39152cf493/772e8/18e.png 200w,\n/static/0e3766361ce9d08f0c4fdd39152cf493/e17e5/18e.png 400w,\n/static/0e3766361ce9d08f0c4fdd39152cf493/5a190/18e.png 800w,\n/static/0e3766361ce9d08f0c4fdd39152cf493/77672/18e.png 1060w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>The JavaScript code making up our React application is run in the browser.\nThe browser gets the JavaScript from the <em>React dev server</em>, which is the application that runs after running the command <code class=\"language-text\">npm start</code>.\nThe dev-server transforms the JavaScript into a format understood by the browser.\nAmong other things, it stitches together JavaScript from different files into one file.\nWe'll discuss the dev-server in more detail in <a href=\"/part7\">part 7</a> of the course.</p>\n<p>The React application running in the browser fetches the JSON formatted data from <em>json-server</em> running on port 3001 on the machine.\nThe server we query the data from - <em>json-server</em> - gets its data from the file <em>db.json</em>.</p>\n<p>At this point in development, all the parts of the application happen to reside on the software developer's machine, otherwise known as localhost.\nThe situation changes when the application is deployed to the internet.\nWe will do this in <a href=\"/part3\">part 3</a>.</p>\n</div>\n<div class=\"tasks\">\n<h3>Exercises 2.11-2.14</h3>\n<h4>2.11: The Communities Step6</h4>\n<p>We continue with developing our community directory.\nStore the initial state of the application in the file <em>db.json</em>, which should be placed in the root of the project.</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"groups\"</span><span class=\"token operator\">:</span><span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span> \n      <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"COMP 227 Students\"</span><span class=\"token punctuation\">,</span> \n      <span class=\"token property\">\"url\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"https://discord.gg/VRUKRxCJ95\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"id\"</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span> \n      <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"PySlackers\"</span><span class=\"token punctuation\">,</span> \n      <span class=\"token property\">\"url\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"https://pythondev.slack.com\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"id\"</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span> \n      <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Code Support\"</span><span class=\"token punctuation\">,</span> \n      <span class=\"token property\">\"url\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"https://discord.gg/XQ9C3sY\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"id\"</span><span class=\"token operator\">:</span> <span class=\"token number\">3</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span> \n      <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Front End Developers\"</span><span class=\"token punctuation\">,</span> \n      <span class=\"token property\">\"url\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"https://discord.gg/XHsumw2C39\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"id\"</span><span class=\"token operator\">:</span> <span class=\"token number\">4</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Start json-server on port 3001 and make sure that the server returns the list of people by going to the address <a href=\"http://localhost:3001/groups\">http://localhost:3001/groups</a> in the browser.</p>\n<p>If you receive the following error message:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">events<span class=\"token punctuation\">.</span>js<span class=\"token operator\">:</span><span class=\"token number\">182</span>\n      <span class=\"token keyword\">throw</span> er<span class=\"token punctuation\">;</span> <span class=\"token comment\">// Unhandled 'error' event</span>\n      <span class=\"token operator\">^</span>\n\nError<span class=\"token operator\">:</span> listen <span class=\"token constant\">EADDRINUSE</span> <span class=\"token number\">0.0</span><span class=\"token number\">.0</span><span class=\"token number\">.0</span><span class=\"token operator\">:</span><span class=\"token number\">3001</span>\n    at Object<span class=\"token punctuation\">.</span><span class=\"token function\">_errnoException</span> <span class=\"token punctuation\">(</span>util<span class=\"token punctuation\">.</span>js<span class=\"token operator\">:</span><span class=\"token number\">1019</span><span class=\"token operator\">:</span><span class=\"token number\">11</span><span class=\"token punctuation\">)</span>\n    at <span class=\"token function\">_exceptionWithHostPort</span> <span class=\"token punctuation\">(</span>util<span class=\"token punctuation\">.</span>js<span class=\"token operator\">:</span><span class=\"token number\">1041</span><span class=\"token operator\">:</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>it means that port 3001 is already in use by another application, e.g. in use by an already running json-server.\nClose the other application, or change the port in case that doesn't work.</p>\n<p>Modify the application such that the initial state of the data is fetched from the server using the <code class=\"language-text\">axios</code> library.\nComplete the fetching with an <a href=\"https://reactjs.org/docs/hooks-effect.html\">Effect hook</a>.</p>\n</div>","frontmatter":{"mainImage":{"publicURL":"/static/8869c2e065a6ae187c633a378e6fa6be/part-2.svg"},"part":2,"letter":"c","lang":"en"}}},"pageContext":{"part":2,"letter":"c","lang":"en"}}}